فيما يلي سكربت متكامل بلغة T-SQL على SQL Server ينشئ قاعدة البيانات كاملةً وفقاً لمتطلبات الوثيقة الوظيفية :

```sql
-- 1. إنشاء قاعدة البيانات
IF DB_ID(N'ElectronicsStoreDB') IS NULL
    CREATE DATABASE ElectronicsStoreDB;
GO

USE ElectronicsStoreDB;
GO

-- 2. جدول الأصناف (Categories)
CREATE TABLE categories (
    id    INT IDENTITY(1,1) PRIMARY KEY,
    name  NVARCHAR(100) NOT NULL UNIQUE
);
GO

-- 3. جدول الموردين (Suppliers)
CREATE TABLE suppliers (
    id      INT IDENTITY(1,1) PRIMARY KEY,
    name    NVARCHAR(100) NOT NULL,
    phone   NVARCHAR(20),
    email   NVARCHAR(100),
    address NVARCHAR(200)
);
GO

-- 4. جدول الأدوار والصلاحيات (Roles & Permissions)
CREATE TABLE roles (
    id   INT IDENTITY(1,1) PRIMARY KEY,
    name NVARCHAR(50) NOT NULL UNIQUE
);
GO

CREATE TABLE permissions (
    id          INT IDENTITY(1,1) PRIMARY KEY,
    name        NVARCHAR(100) NOT NULL UNIQUE,
    description NVARCHAR(200)
);
GO

CREATE TABLE role_permissions (
    role_id       INT NOT NULL,
    permission_id INT NOT NULL,
    PRIMARY KEY (role_id, permission_id),
    FOREIGN KEY (role_id)       REFERENCES roles(id),
    FOREIGN KEY (permission_id) REFERENCES permissions(id)
);
GO

-- 5. جدول المستخدمين (Users) :contentReference[oaicite:1]{index=1}
CREATE TABLE users (
    id         INT IDENTITY(1,1) PRIMARY KEY,
    username   NVARCHAR(50) NOT NULL UNIQUE,
    password   NVARCHAR(100) NOT NULL,
    role_id    INT NOT NULL,
    created_at DATETIME    DEFAULT GETDATE(),
    FOREIGN KEY (role_id) REFERENCES roles(id)
);
GO

-- 6. جدول المنتجات (Products) :contentReference[oaicite:2]{index=2}
CREATE TABLE products (
    id                   INT IDENTITY(1,1) PRIMARY KEY,
    name                 NVARCHAR(150) NOT NULL,
    barcode              NVARCHAR(50) UNIQUE,
    category_id          INT NOT NULL,
    supplier_id          INT NULL,
    default_selling_price DECIMAL(10,2) NOT NULL CHECK(default_selling_price >= 0),
    min_selling_price     DECIMAL(10,2) NOT NULL CHECK(min_selling_price >= 0),
    description          NVARCHAR(500),
    default_cost_price   DECIMAL(10,2) NOT NULL CHECK(default_cost_price >= 0),
    created_at           DATETIME    DEFAULT GETDATE(),
    FOREIGN KEY (category_id) REFERENCES categories(id),
    FOREIGN KEY (supplier_id) FOREIGN KEY (supplier_id) REFERENCES suppliers(id)
);
GO

-- 7. جداول إدارة المشتريات (Purchase Invoices) :contentReference[oaicite:3]{index=3}
CREATE TABLE purchase_invoices (
    id             INT IDENTITY(1,1) PRIMARY KEY,
    invoice_number NVARCHAR(50) NOT NULL UNIQUE,
    supplier_id    INT NOT NULL,
    invoice_date   DATETIME DEFAULT GETDATE(),
    user_id        INT NOT NULL,
    total_amount   DECIMAL(14,2) NOT NULL,
    created_at   DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (supplier_id) REFERENCES suppliers(id),
    FOREIGN KEY (user_id)       REFERENCES users(id)
);
GO

CREATE TABLE purchase_invoice_details (
    id                  INT IDENTITY(1,1) PRIMARY KEY,
    purchase_invoice_id INT NOT NULL,
    product_id          INT NOT NULL,
    quantity            INT NOT NULL CHECK(quantity > 0),
    unit_cost           DECIMAL(10,2) NOT NULL CHECK(unit_cost >= 0),
    line_total          AS (quantity * unit_cost) PERSISTED,
    FOREIGN KEY (purchase_invoice_id) REFERENCES purchase_invoices(id),
    FOREIGN KEY (product_id)          REFERENCES products(id)
);
GO

-- 8. جداول نقاط البيع (Sales / POS) :contentReference[oaicite:4]{index=4}
CREATE TABLE sales_invoices (
    id                   INT IDENTITY(1,1) PRIMARY KEY,
    invoice_number       NVARCHAR(50) NOT NULL UNIQUE,
    customer_name        NVARCHAR(100),
    invoice_date         DATETIME DEFAULT GETDATE(),
    discount_total       DECIMAL(12,2) NOT NULL DEFAULT 0,
    total_amount         DECIMAL(14,2) NOT NULL,
    payment_method       NVARCHAR(20) NOT NULL 
                           CHECK(payment_method IN('cash','card','deferred')),
    override_by_user_id  INT NULL,
    override_date        DATETIME NULL,
    user_id              INT NOT NULL,
	created_at    	DATETIME DEFAULT GETDATE(),
	
    FOREIGN KEY (override_by_user_id) REFERENCES users(id),
    FOREIGN KEY (user_id)               REFERENCES users(id)
);
GO

CREATE TABLE sales_invoice_details (
    id               INT IDENTITY(1,1) PRIMARY KEY,
    sales_invoice_id INT NOT NULL,
    product_id       INT NOT NULL,
    quantity         INT NOT NULL CHECK(quantity > 0),
    unit_price       DECIMAL(10,2) NOT NULL CHECK(unit_price >= 0),
    discount_amount  DECIMAL(10,2) NOT NULL DEFAULT 0 CHECK(discount_amount >= 0),
    final_price      AS (unit_price - discount_amount) PERSISTED,
    line_total       AS (final_price * quantity)       PERSISTED,
    FOREIGN KEY (sales_invoice_id) REFERENCES sales_invoices(id),
    FOREIGN KEY (product_id)          REFERENCES products(id)
);
GO

-- 9. Trigger لضمان ألا يقل السعر عن الحد الأدنى دون تفويض :contentReference[oaicite:5]{index=5}
CREATE TRIGGER trg_CheckMinSellingPrice
ON sales_invoice_details
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
        SELECT 1
        FROM inserted i
        JOIN products p ON i.product_id = p.id
        JOIN sales_invoices s ON i.sales_invoice_id = s.id
        WHERE i.final_price < p.min_selling_price
          AND s.override_by_user_id IS NULL
    )
    BEGIN
        RAISERROR('سعر البيع أقل من الحد الأدنى بدون تفويض مدير.', 16, 1);
        ROLLBACK TRANSACTION;
    END
END;
GO

-- 10. جدول سجل حركة المخزون (Inventory Logs) لجميع العمليات :contentReference[oaicite:6]{index=6}
CREATE TABLE inventory_logs (
    id             INT IDENTITY(1,1) PRIMARY KEY,
    product_id     INT NOT NULL,
    movement_type  NVARCHAR(20) NOT NULL 
                    CHECK(movement_type IN('purchase','sale','return_sale','return_purchase','adjust')),
    quantity       INT NOT NULL,
    unit_cost      DECIMAL(10,2) NOT NULL,
    reference_tbl  NVARCHAR(50) NOT NULL,  -- e.g. 'purchase_invoice', 'sales_invoice'
    reference_id   INT NOT NULL,
    note           NVARCHAR(200),
    user_id        INT NOT NULL,
    created_at     DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (product_id)    REFERENCES products(id),
    FOREIGN KEY (user_id)       REFERENCES users(id)
);
GO

-- 11. جدول مرتجعات المبيعات (Sales Returns) :contentReference[oaicite:7]{index=7}
CREATE TABLE sales_returns (
    id                INT IDENTITY(1,1) PRIMARY KEY,
    sales_invoice_id  INT NOT NULL,
    product_id        INT NOT NULL,
    quantity          INT NOT NULL CHECK(quantity > 0),
    reason            NVARCHAR(200),
    user_id           INT NOT NULL,
    created_at        DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (sales_invoice_id) REFERENCES sales_invoices(id),
    FOREIGN KEY (product_id)        REFERENCES products(id),
    FOREIGN KEY (user_id)           REFERENCES users(id)
);
GO

-- 12. جدول مرتجعات المشتريات (Purchase Returns) :contentReference[oaicite:8]{index=8}
CREATE TABLE purchase_returns (
    id                  INT IDENTITY(1,1) PRIMARY KEY,
    purchase_invoice_id INT NOT NULL,
    product_id          INT NOT NULL,
    quantity            INT NOT NULL CHECK(quantity > 0),
    reason              NVARCHAR(200),
    user_id             INT NOT NULL,
    created_at          DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (purchase_invoice_id) REFERENCES purchase_invoices(id),
    FOREIGN KEY (product_id)            REFERENCES products(id),
    FOREIGN KEY (user_id)               REFERENCES users(id)
);
GO

-- 13. جدول المصروفات (Expenses) :contentReference[oaicite:9]{index=9}
CREATE TABLE expenses (
    id            INT IDENTITY(1,1) PRIMARY KEY,
    expense_type  NVARCHAR(100) NOT NULL,
    amount        DECIMAL(12,2) NOT NULL CHECK(amount > 0),
    note          NVARCHAR(200),
    user_id       INT NOT NULL,
    created_at    DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (user_id) REFERENCES users(id)
);
GO

-- 14. View لحساب الكمية الحالية لكل منتج (Inventory View)
CREATE VIEW inventory_view AS
SELECT
    p.id               AS product_id,
    p.name             AS product_name,
    ISNULL(SUM(il.quantity), 0) AS current_quantity
FROM products p
LEFT JOIN inventory_logs il
    ON p.id = il.product_id
GROUP BY p.id, p.name;
GO

-- 15. View لتقييم قيمة المخزون الحالي (Inventory Valuation) :contentReference[oaicite:10]{index=10}
CREATE VIEW inventory_valuation_view AS
SELECT
    p.id               AS product_id,
    p.name             AS product_name,
    ISNULL(SUM(il.quantity * il.unit_cost), 0) AS total_value
FROM products p
LEFT JOIN inventory_logs il
    ON p.id = il.product_id
GROUP BY p.id, p.name;
GO

-- 16. View لحساب تكلفة البضاعة المباعة حسب FIFO (COGS View)
CREATE VIEW cogs_view AS
SELECT
    si.id              AS sales_invoice_id,
    si.invoice_number,
    ISNULL(SUM(-il.quantity * il.unit_cost), 0) AS cost_of_goods_sold
FROM sales_invoices si
JOIN inventory_logs il
    ON il.reference_tbl = 'sales_invoice'
   AND il.reference_id  = si.id
   AND il.movement_type = 'sale'
GROUP BY si.id, si.invoice_number;
GO
```

> هذا السكربت يغطي جميع المتطلبات الوظيفية الآتية:
>
> * إدارة المنتجات والأصناف والموردين&#x20;
> * إدارة المشتريات مع تفاصيل سعر التكلفة لكل شحنة&#x20;
> * نقاط البيع مع دعم التخفيضات وصلاحية التجاوز والتحقّق من الحد الأدنى للسعر&#x20;
> * سجل حركة المخزون لجميع العمليات (FIFO ممكن تطبيقه في الكود الخارجي)&#x20;
> * مرتجعات المبيعات والمشتريات وتأثيرها على المخزون&#x20;
> * وحدة المصروفات&#x20;
> * عرض لحساب الكمية الحالية، تقييم المخزون، وتكلفة البضاعة المباعة بدقة FIFO&#x20;

بهذا تكون لديك قاعدة بيانات متكاملة وجاهزة للتطبيق العملي.
